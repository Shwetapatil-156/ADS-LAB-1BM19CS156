#include <iostream>
#include <vector>
#include <cstdint>
using namespace std;
struct Node
{

	int data;
	Node* link;
	
};
Node* Xor( Node *x, Node *y)
{
	return (Node*)((uintptr_t)(x)^(uintptr_t)(y));

}
void traverse(Node* head)
{
	Node* curr=head;
	Node* prev=nullptr;
	Node* next;

while(curr!=nullptr)
{
	cout<<curr->data<<"->";
	next=Xor(prev, curr->link);
	prev=curr;
	curr=next;
	
}
cout<<"nullptr";
}
struct Node* delEnd(struct Node* head)
{

    if (head == NULL)
        cout<<"list empty";
    else {
  
       
        struct Node* curr = head;
        struct Node* prev = NULL;
        struct Node* next;
  
       
        while (Xor(curr->link, prev) != NULL) {
  
           
            next = Xor(prev, curr->link);
  
           
            prev = curr;
  
           
            curr = next;
        }
       
        if (prev != NULL)
            prev->link = Xor(Xor(prev->link, curr), NULL);
  
        else
            head = NULL;
  
      
        free(curr);
    }
  

    return head;
}
void push(Node* &headRef, int data)
{
Node* newnode=new Node();
newnode->data=data;
newnode->link=Xor(headRef, nullptr);
if(headRef)
{
	headRef->link=Xor(newnode, Xor(headRef->link, nullptr));
	
}
headRef=newnode;
}
int main()
{
	vector<int> keys={ 1,2,3,4,5};
	Node* head=nullptr;
	for(int i=keys.size() -1; i>=0; i--)
	{
		push (head, keys[i]);
	}
	traverse(head);

	 delEnd(head);
	 traverse(head);
	 return 0;
}
